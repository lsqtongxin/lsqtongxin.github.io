{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/LCTHW1.md","hash":"841f19bb9d1a577a02c5ce9fa0058195b6b3eb3a","modified":1736562382130},{"_id":"source/_posts/hello-world.md","hash":"ab3d811524d755eb45f133b7f5f009b1fffc291a","modified":1735988396879},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734144583000},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1734144583000},{"_id":"themes/icarus/package.json","hash":"f5bf0acf4fee3b57046e0be507d2d324e2b8805f","modified":1734144583000},{"_id":"themes/icarus/.eslintrc.json","hash":"ca45d8e5d80ad6b7004cddacae7fc7d8040b2d6f","modified":1734144583000},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1734144583000},{"_id":"themes/icarus/include/config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1734144583000},{"_id":"themes/icarus/include/dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1734144583000},{"_id":"themes/icarus/include/register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1734144583000},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1734144583000},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1734144583000},{"_id":"themes/icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1734144583000},{"_id":"themes/icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1734144583000},{"_id":"themes/icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1734144583000},{"_id":"themes/icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1734144583000},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1734144583000},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1734144583000},{"_id":"themes/icarus/languages/fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1734144583000},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1734144583000},{"_id":"themes/icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1734144583000},{"_id":"themes/icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1734144583000},{"_id":"themes/icarus/languages/it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1734144583000},{"_id":"themes/icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1734144583000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1734144583000},{"_id":"themes/icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1734144583000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1734144583000},{"_id":"themes/icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1734144583000},{"_id":"themes/icarus/languages/sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1734144583000},{"_id":"themes/icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1734144583000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1734144583000},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1734144583000},{"_id":"themes/icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1734144583000},{"_id":"themes/icarus/layout/category.jsx","hash":"2313be8301011d218830b853b294b022ce81b423","modified":1734144583000},{"_id":"themes/icarus/layout/archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1734144583000},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1734144583000},{"_id":"themes/icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1734144583000},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1734144583000},{"_id":"themes/icarus/scripts/index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1734144583000},{"_id":"themes/icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1734144583000},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1734144583000},{"_id":"themes/icarus/layout/tag.jsx","hash":"a9a08c9f3eec8994d37149d1ab19f2b5b8f4cd2f","modified":1734144583000},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1734144583000},{"_id":"themes/icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1734144583000},{"_id":"themes/icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1734144583000},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1734144583000},{"_id":"themes/icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1734144583000},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1734144583000},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"f24e60941bf49b124dfc6a8b6c194da4c62abc2f","modified":1734144583000},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"d9830273e7e23c4151b10840f131f0b78b961bae","modified":1734144583000},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1734144583000},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"17d374bf92867a67b15d657c2d41f8e4f9271102","modified":1734144583000},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"de1ac56ec6888aaeb5db81d94693248b3467e4f6","modified":1734144583000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1734144583000},{"_id":"themes/icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1734144583000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1734144583000},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1734144583000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/鍔熻兘寤鸿.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1734144583000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug鍙嶉.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1734144583000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1734144583000},{"_id":"themes/icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1734144583000},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1734144583000},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1734144583000},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1734144583000},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1734144583000},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1734144583000},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1734144583000},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1734144583000},{"_id":"themes/icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1734144583000},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1734144583000},{"_id":"themes/icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1734144583000},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1734144583000},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1734144583000},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1734144583000},{"_id":"themes/icarus/layout/common/article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1734144583000},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"76ee7c6687e96e6262985323665d6273a37e54c5","modified":1734144583000},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1734144583000},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1734144583000},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1734144583000},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1734144583000},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1734144583000},{"_id":"themes/icarus/layout/common/head.jsx","hash":"bf783d5ef6d58924150472637c6c17782c83e102","modified":1734144583000},{"_id":"themes/icarus/layout/common/search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1734144583000},{"_id":"themes/icarus/layout/common/share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1734144583000},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1734144583000},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"5d07312406b401e8d4e9584b4d41ed7377993935","modified":1734144583000},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"f86a0bae3a92bc07bd674f03a046fb1b6c1b48af","modified":1734144583000},{"_id":"themes/icarus/layout/plugin/pjax.jsx","hash":"65956102d5faabcedaaafb14b0201548f15e60ce","modified":1734144583000},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"2322a2b24e63bfb44b2acfc07795435f8c89d511","modified":1734144583000},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1734144583000},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1734144583000},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1734144583000},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1734144583000},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1734144583000},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1734144583000},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1734144583000},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1734144583000},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1734144583000},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1734144583000},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1734144583000},{"_id":"themes/icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1734144583000},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"265120b80df9808358df3ff7c4eada8a66512a4b","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"04c0738dc0a3ed89aecae2aee4ab60173f09e66b","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1734144583000},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1734144583000},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1734144583000},{"_id":"themes/icarus/include/schema/plugin/pjax.json","hash":"1f6218016569eb9cd354a06a9537c7110efb5f17","modified":1734144583000},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1734144583000},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1734144583000},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1734144583000},{"_id":"themes/icarus/source/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1734144583000},{"_id":"themes/icarus/source/img/logo.jpg","hash":"4d1aeb4e1ab3d68be0f3edbf668104d0b85cc39e","modified":1735309904760},{"_id":"themes/icarus/source/js/pjax.js","hash":"dfc55138a1ba97a312e469201bd23f386cce7ba7","modified":1734144583000},{"_id":"source/_posts/1-1.png","hash":"04248c1f5985c8267bea5e73747f2b72f9637cdf","modified":1735998510771},{"_id":"source/_posts/1-2.png","hash":"6e1f76d2e83c0bcce9d97f302390d06066809665","modified":1735998663558},{"_id":"source/_posts/1-3.png","hash":"d76e3d706ab9d083026f342d45e02294fa2d51f8","modified":1735998775969},{"_id":"source/_posts/LCTHW1-3.png","hash":"d76e3d706ab9d083026f342d45e02294fa2d51f8","modified":1736562382115},{"_id":"source/_posts/verilator1-1.png","hash":"33c7217cff576fe576edcfadd33a5e6211f09712","modified":1736562382158},{"_id":"source/_posts/summary2024.md","hash":"fe369b1365666443936266f17eb42de616eb69e9","modified":1736562382144},{"_id":"source/_posts/verilator1-4.png","hash":"24e315c42ff8a3e9f69ef4c1d7abc949d8421663","modified":1736562382189},{"_id":"source/_posts/verilator1.md","hash":"650fbb74e255b4c0b21e4256c24ff0722ef40eca","modified":1736562382211},{"_id":"source/_posts/verilator1-5.png","hash":"d51a8f0fbc5baaffb28ede4ccac2b762dbefadd5","modified":1736562382198},{"_id":"source/_posts/verilator1-3.png","hash":"6775bc2e36f2df6c9a398e2937da2e725f70d4ee","modified":1736562382178},{"_id":"source/_posts/verilator1-2.png","hash":"1962d3b05c2823502475381e0ccdb5552b4ba879","modified":1736562382169},{"_id":"source/_posts/LCTHW1-1.png","hash":"04248c1f5985c8267bea5e73747f2b72f9637cdf","modified":1736562382007},{"_id":"source/_posts/LCTHW1-2.png","hash":"6e1f76d2e83c0bcce9d97f302390d06066809665","modified":1736562382070}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"笨方法学习C-笔记1","date":"2025-01-05T06:25:00.000Z","_content":"\n> LCTHW： [Learn C The Hard Way](https://learncodethehardway.org/c/)\n\n> [笨方法学习C(译)](https://wizardforcel.gitbooks.io/lcthw/content/)\n\n> [LCTHW Github](https://github.com/wizardforcel/lcthw-zh)\n\n## 笔记1所包括的范围\n\n- [前言](https://wizardforcel.gitbooks.io/lcthw/content/preface.html)\n- [导言](https://wizardforcel.gitbooks.io/lcthw/content/introduction.html)\n- [练习0](https://wizardforcel.gitbooks.io/lcthw/content/ex0.html)\n- [练习1](https://wizardforcel.gitbooks.io/lcthw/content/ex1.html)\n- [练习2](https://wizardforcel.gitbooks.io/lcthw/content/ex2.html)\n- [练习3](https://wizardforcel.gitbooks.io/lcthw/content/ex3.html)\n- [练习4](https://wizardforcel.gitbooks.io/lcthw/content/ex4.html)\n\n\n## [前言](https://wizardforcel.gitbooks.io/lcthw/content/preface.html)\n\n期望我能一个月搞定这些教程\n\n## [导言](https://wizardforcel.gitbooks.io/lcthw/content/introduction.html)\n\n所能学到的内容有:\n\n+ C的基本语法和编写习惯。\n+ 编译，`make`文件和链接。\n+ 寻找和预防bug。\n+ 防御性编程实践。\n+ 使C的代码崩溃。\n+ 编写基本的Unix系统软件。\n\n\n必须遵守的规则：\n\n+ 手动输入所有代码。**不要复制粘贴！**\n+ 正确地输入所有代码，**也包括注释**。\n+ 运行代码并保证产生相同的输出。\n+ 如果出现了bug则修正它。\n+ 做附加题时，如果你做不出某道题，马上跳过。\n+ 在寻求帮助之前首先试着自己弄懂。\n\n\n学习C语言会使你变成更好的程序员，是一门提升程序员核心技能的最佳语言。\nC比其它语言都要难，而这是由于C并不对你隐藏细节，它们在其它语言中都试图并且未能被掩盖，实质是其他语言对底层细节进行了进一步的封装，程序员仅仅是调用这些上层的函数即可实现功能。\n\n## [练习0](https://wizardforcel.gitbooks.io/lcthw/content/ex0.html)\n\n我计划使用\n+ Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 或 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)\n+ vim\n+ **警告不要使用IDE**\n\n其中，如何配置vim可以参考这个[链接](https://ysyx.oscc.cc/docs/ics-pa/0.4.html)\n\nIDE，或者“集成开发工具”，它隐藏了背后的细节，你的工作是弄清楚背后发生了什么，对于学习C编程（以及许多其它语言），它们没有意义。\n\nIDE类似于吉他的[TAB（tablature）](https://en.wikipedia.org/wiki/Tablature)，而我们需要学习的是[五线谱](https://en.wikipedia.org/wiki/Staff_(music))\n\n## [练习1](https://wizardforcel.gitbooks.io/lcthw/content/ex1.html)\n\n> 好好学习，天天向上\n\n> 毛泽东\n\n### 编写如下代码到ex1.c中，如图所示：\n```c\nint main(int argc,char* argv[]){\n        puts(\"hello world!\");\n        puts(\"happy new year!\");\n        puts(\"good good study, day day up!\");\n        return 0;\n}\n```\n![img](./1-1.png)\n\n### 执行命令：\n```c\nmake ex1\n```\n![img](./1-2.png)\n通过编译的结果来看，存在一个警告，提示我们需要将 #include<stdio.h>添加到代码中\n\n### 未加#include<stdio.h>,运行ex1:\n![img](./1-3.png)\n\n### 添加加#include<stdio.h>,运行ex1:\n![img](./1-4.png)\n\n### 附加题\n\n#### 在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\nex1是一个[ELF文件](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)，随机修改或删除一部分，会导致无法运行\n\n#### 再多打印5行文本或者其它比\"Hello world.\"更复杂的东西。\n```c\n#include<stdio.h>\nint main(int argc,char* argv[]){\n        puts(\"hello world!\");\n        puts(\"happy new year!\");\n        puts(\"good good study, day day up!\");\n        puts(\"路曼曼其修远兮，吾将上下而求索\");\n        puts(\"萧瑟秋风今又是，换了人间\");\n        return 0;\n}\n```\n\n#### 执行man 3 puts来阅读这个函数和其它函数的文档\n\n这个文档包括了 fputc, fputs, putc, putchar, puts函数，用于输出字符和字符串。\n\nSYNOPSIS\n       #include <stdio.h>\n\n       int fputc(int c, FILE *stream);\n       int putc(int c, FILE *stream);\n       int putchar(int c);\n\n       int fputs(const char *restrict s, FILE *restrict stream);\n       int puts(const char *s);\n\nDESCRIPTION\n       fputc() writes the character c, cast to an unsigned char, to stream.\n\n       putc() is equivalent to fputc() except that it may be implemented as a macro which evaluates stream more than once.\n\n       putchar(c) is equivalent to putc(c, stdout).\n\n       fputs() writes the string s to stream, without its terminating null byte ('\\0').\n\n       puts() writes the string s and a trailing newline to stdout.\n\n       Calls to the functions described here can be mixed with each other and with calls to other output functions from the stdio library for the same output stream.\n\n       For nonlocking counterparts, see unlocked_stdio(3).\n\nRETURN VALUE\n       fputc(), putc(), and putchar() return the character written as an unsigned char cast to an int or EOF on error.\n\n       puts() and fputs() return a nonnegative number on success, or EOF on error.\n\n\n## [练习2](https://wizardforcel.gitbooks.io/lcthw/content/ex2.html)\n\n\nMakefile文件的缩进是一个TAB，下面代码中第四行rm前面是一个 *TAB* ，而不是多个等量的空格。\n其中每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建\n```bash\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n```c\nCFLAGS=-Wall -g\n\nclean:\n    rm -f ex1\n\n```\n\n```c\n#include<stdio.h>\nint main(int argc,char* argv[]){\n    puts(\"hello world!\");\n    puts(\"happy new year!\");\n    puts(\"good good study, day day up!\");\n    puts(\"路曼曼其修远兮，吾将上下而求索\");\n    puts(\"萧瑟秋风今又是，换了人间\");\n    puts(\"仰天大笑出门去，我辈岂是蓬蒿人\");\n    return 0;\n}\n\n```\n\n\n### 附加题\n```c\nCFLAGS=-Wall -g\n\nall: ex2\n\n%: %.c\n        cc ${CFLAGS} -o $@ $^\n\n.PHONY: clean all\n\nclean:\n        rm -rf ex2\n\n```\n阅读man make来了解关于如何执行它的更多信息。\n阅读man cc来了解关于-Wall和-g行为的更多信息。\n在互联网上搜索Makefile文件，看看你是否能改进你的文件。\n在另一个C语言项目中找到Makefile文件，并且尝试理解它做了什么。\n\n\n\n## [练习3](https://wizardforcel.gitbooks.io/lcthw/content/ex3.html)\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    int age = 10;\n    int height = 72;\n\n    printf(\"I am %d years old.\\n\", age);\n    printf(\"I am %d inches tall.\\n\", height);\n\n    return 0;\n}\n\n```\n```c\nCFLAGS=-Wall -g\n\nall: ex3\n\n%: %.c\n        cc ${CFLAGS} -o $@ $^\n\n.PHONY: clean all\n\nclean:\n        rm -rf ex3\n\n```\n\n直接执行 make clean all\n\n\n## [练习4](https://wizardforcel.gitbooks.io/lcthw/content/ex4.html)\n\nValgrind 我之前没有系统学习过，只是零零散散的看到过这个命令。\n\n\n\n","source":"_posts/LCTHW1.md","raw":"---\ntitle: 笨方法学习C-笔记1\ndate: 2025-01-05 14:25:00\ntags: LCTHW\n---\n\n> LCTHW： [Learn C The Hard Way](https://learncodethehardway.org/c/)\n\n> [笨方法学习C(译)](https://wizardforcel.gitbooks.io/lcthw/content/)\n\n> [LCTHW Github](https://github.com/wizardforcel/lcthw-zh)\n\n## 笔记1所包括的范围\n\n- [前言](https://wizardforcel.gitbooks.io/lcthw/content/preface.html)\n- [导言](https://wizardforcel.gitbooks.io/lcthw/content/introduction.html)\n- [练习0](https://wizardforcel.gitbooks.io/lcthw/content/ex0.html)\n- [练习1](https://wizardforcel.gitbooks.io/lcthw/content/ex1.html)\n- [练习2](https://wizardforcel.gitbooks.io/lcthw/content/ex2.html)\n- [练习3](https://wizardforcel.gitbooks.io/lcthw/content/ex3.html)\n- [练习4](https://wizardforcel.gitbooks.io/lcthw/content/ex4.html)\n\n\n## [前言](https://wizardforcel.gitbooks.io/lcthw/content/preface.html)\n\n期望我能一个月搞定这些教程\n\n## [导言](https://wizardforcel.gitbooks.io/lcthw/content/introduction.html)\n\n所能学到的内容有:\n\n+ C的基本语法和编写习惯。\n+ 编译，`make`文件和链接。\n+ 寻找和预防bug。\n+ 防御性编程实践。\n+ 使C的代码崩溃。\n+ 编写基本的Unix系统软件。\n\n\n必须遵守的规则：\n\n+ 手动输入所有代码。**不要复制粘贴！**\n+ 正确地输入所有代码，**也包括注释**。\n+ 运行代码并保证产生相同的输出。\n+ 如果出现了bug则修正它。\n+ 做附加题时，如果你做不出某道题，马上跳过。\n+ 在寻求帮助之前首先试着自己弄懂。\n\n\n学习C语言会使你变成更好的程序员，是一门提升程序员核心技能的最佳语言。\nC比其它语言都要难，而这是由于C并不对你隐藏细节，它们在其它语言中都试图并且未能被掩盖，实质是其他语言对底层细节进行了进一步的封装，程序员仅仅是调用这些上层的函数即可实现功能。\n\n## [练习0](https://wizardforcel.gitbooks.io/lcthw/content/ex0.html)\n\n我计划使用\n+ Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 或 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)\n+ vim\n+ **警告不要使用IDE**\n\n其中，如何配置vim可以参考这个[链接](https://ysyx.oscc.cc/docs/ics-pa/0.4.html)\n\nIDE，或者“集成开发工具”，它隐藏了背后的细节，你的工作是弄清楚背后发生了什么，对于学习C编程（以及许多其它语言），它们没有意义。\n\nIDE类似于吉他的[TAB（tablature）](https://en.wikipedia.org/wiki/Tablature)，而我们需要学习的是[五线谱](https://en.wikipedia.org/wiki/Staff_(music))\n\n## [练习1](https://wizardforcel.gitbooks.io/lcthw/content/ex1.html)\n\n> 好好学习，天天向上\n\n> 毛泽东\n\n### 编写如下代码到ex1.c中，如图所示：\n```c\nint main(int argc,char* argv[]){\n        puts(\"hello world!\");\n        puts(\"happy new year!\");\n        puts(\"good good study, day day up!\");\n        return 0;\n}\n```\n![img](./1-1.png)\n\n### 执行命令：\n```c\nmake ex1\n```\n![img](./1-2.png)\n通过编译的结果来看，存在一个警告，提示我们需要将 #include<stdio.h>添加到代码中\n\n### 未加#include<stdio.h>,运行ex1:\n![img](./1-3.png)\n\n### 添加加#include<stdio.h>,运行ex1:\n![img](./1-4.png)\n\n### 附加题\n\n#### 在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\nex1是一个[ELF文件](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)，随机修改或删除一部分，会导致无法运行\n\n#### 再多打印5行文本或者其它比\"Hello world.\"更复杂的东西。\n```c\n#include<stdio.h>\nint main(int argc,char* argv[]){\n        puts(\"hello world!\");\n        puts(\"happy new year!\");\n        puts(\"good good study, day day up!\");\n        puts(\"路曼曼其修远兮，吾将上下而求索\");\n        puts(\"萧瑟秋风今又是，换了人间\");\n        return 0;\n}\n```\n\n#### 执行man 3 puts来阅读这个函数和其它函数的文档\n\n这个文档包括了 fputc, fputs, putc, putchar, puts函数，用于输出字符和字符串。\n\nSYNOPSIS\n       #include <stdio.h>\n\n       int fputc(int c, FILE *stream);\n       int putc(int c, FILE *stream);\n       int putchar(int c);\n\n       int fputs(const char *restrict s, FILE *restrict stream);\n       int puts(const char *s);\n\nDESCRIPTION\n       fputc() writes the character c, cast to an unsigned char, to stream.\n\n       putc() is equivalent to fputc() except that it may be implemented as a macro which evaluates stream more than once.\n\n       putchar(c) is equivalent to putc(c, stdout).\n\n       fputs() writes the string s to stream, without its terminating null byte ('\\0').\n\n       puts() writes the string s and a trailing newline to stdout.\n\n       Calls to the functions described here can be mixed with each other and with calls to other output functions from the stdio library for the same output stream.\n\n       For nonlocking counterparts, see unlocked_stdio(3).\n\nRETURN VALUE\n       fputc(), putc(), and putchar() return the character written as an unsigned char cast to an int or EOF on error.\n\n       puts() and fputs() return a nonnegative number on success, or EOF on error.\n\n\n## [练习2](https://wizardforcel.gitbooks.io/lcthw/content/ex2.html)\n\n\nMakefile文件的缩进是一个TAB，下面代码中第四行rm前面是一个 *TAB* ，而不是多个等量的空格。\n其中每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建\n```bash\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n```c\nCFLAGS=-Wall -g\n\nclean:\n    rm -f ex1\n\n```\n\n```c\n#include<stdio.h>\nint main(int argc,char* argv[]){\n    puts(\"hello world!\");\n    puts(\"happy new year!\");\n    puts(\"good good study, day day up!\");\n    puts(\"路曼曼其修远兮，吾将上下而求索\");\n    puts(\"萧瑟秋风今又是，换了人间\");\n    puts(\"仰天大笑出门去，我辈岂是蓬蒿人\");\n    return 0;\n}\n\n```\n\n\n### 附加题\n```c\nCFLAGS=-Wall -g\n\nall: ex2\n\n%: %.c\n        cc ${CFLAGS} -o $@ $^\n\n.PHONY: clean all\n\nclean:\n        rm -rf ex2\n\n```\n阅读man make来了解关于如何执行它的更多信息。\n阅读man cc来了解关于-Wall和-g行为的更多信息。\n在互联网上搜索Makefile文件，看看你是否能改进你的文件。\n在另一个C语言项目中找到Makefile文件，并且尝试理解它做了什么。\n\n\n\n## [练习3](https://wizardforcel.gitbooks.io/lcthw/content/ex3.html)\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    int age = 10;\n    int height = 72;\n\n    printf(\"I am %d years old.\\n\", age);\n    printf(\"I am %d inches tall.\\n\", height);\n\n    return 0;\n}\n\n```\n```c\nCFLAGS=-Wall -g\n\nall: ex3\n\n%: %.c\n        cc ${CFLAGS} -o $@ $^\n\n.PHONY: clean all\n\nclean:\n        rm -rf ex3\n\n```\n\n直接执行 make clean all\n\n\n## [练习4](https://wizardforcel.gitbooks.io/lcthw/content/ex4.html)\n\nValgrind 我之前没有系统学习过，只是零零散散的看到过这个命令。\n\n\n\n","slug":"LCTHW1","published":1,"updated":"2025-01-11T02:26:22.130Z","_id":"cm5i2q4ao0000isunbv2o1q9n","comments":1,"layout":"post","photos":[],"content":"<blockquote>\n<p>LCTHW： <a href=\"https://learncodethehardway.org/c/\">Learn C The Hard Way</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/\">笨方法学习C(译)</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/wizardforcel/lcthw-zh\">LCTHW Github</a></p>\n</blockquote>\n<h2 id=\"笔记1所包括的范围\"><a href=\"#笔记1所包括的范围\" class=\"headerlink\" title=\"笔记1所包括的范围\"></a>笔记1所包括的范围</h2><ul>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/preface.html\">前言</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/introduction.html\">导言</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex0.html\">练习0</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex1.html\">练习1</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex2.html\">练习2</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex3.html\">练习3</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex4.html\">练习4</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/preface.html\">前言</a></h2><p>期望我能一个月搞定这些教程</p>\n<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/introduction.html\">导言</a></h2><p>所能学到的内容有:</p>\n<ul>\n<li>C的基本语法和编写习惯。</li>\n<li>编译，<code>make</code>文件和链接。</li>\n<li>寻找和预防bug。</li>\n<li>防御性编程实践。</li>\n<li>使C的代码崩溃。</li>\n<li>编写基本的Unix系统软件。</li>\n</ul>\n<p>必须遵守的规则：</p>\n<ul>\n<li>手动输入所有代码。<strong>不要复制粘贴！</strong></li>\n<li>正确地输入所有代码，<strong>也包括注释</strong>。</li>\n<li>运行代码并保证产生相同的输出。</li>\n<li>如果出现了bug则修正它。</li>\n<li>做附加题时，如果你做不出某道题，马上跳过。</li>\n<li>在寻求帮助之前首先试着自己弄懂。</li>\n</ul>\n<p>学习C语言会使你变成更好的程序员，是一门提升程序员核心技能的最佳语言。<br>C比其它语言都要难，而这是由于C并不对你隐藏细节，它们在其它语言中都试图并且未能被掩盖，实质是其他语言对底层细节进行了进一步的封装，程序员仅仅是调用这些上层的函数即可实现功能。</p>\n<h2 id=\"练习0\"><a href=\"#练习0\" class=\"headerlink\" title=\"练习0\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex0.html\">练习0</a></h2><p>我计划使用</p>\n<ul>\n<li>Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 或 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)</li>\n<li>vim</li>\n<li><strong>警告不要使用IDE</strong></li>\n</ul>\n<p>其中，如何配置vim可以参考这个<a href=\"https://ysyx.oscc.cc/docs/ics-pa/0.4.html\">链接</a></p>\n<p>IDE，或者“集成开发工具”，它隐藏了背后的细节，你的工作是弄清楚背后发生了什么，对于学习C编程（以及许多其它语言），它们没有意义。</p>\n<p>IDE类似于吉他的<a href=\"https://en.wikipedia.org/wiki/Tablature\">TAB（tablature）</a>，而我们需要学习的是<a href=\"https://en.wikipedia.org/wiki/Staff_(music)\">五线谱</a></p>\n<h2 id=\"练习1\"><a href=\"#练习1\" class=\"headerlink\" title=\"练习1\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex1.html\">练习1</a></h2><blockquote>\n<p>好好学习，天天向上</p>\n</blockquote>\n<blockquote>\n<p>毛泽东</p>\n</blockquote>\n<h3 id=\"编写如下代码到ex1-c中，如图所示：\"><a href=\"#编写如下代码到ex1-c中，如图所示：\" class=\"headerlink\" title=\"编写如下代码到ex1.c中，如图所示：\"></a>编写如下代码到ex1.c中，如图所示：</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;happy new year!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;good good study, day day up!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/./1-1.png\" alt=\"img\"></p>\n<h3 id=\"执行命令：\"><a href=\"#执行命令：\" class=\"headerlink\" title=\"执行命令：\"></a>执行命令：</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ex1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/./1-2.png\" alt=\"img\"><br>通过编译的结果来看，存在一个警告，提示我们需要将 #include&lt;stdio.h&gt;添加到代码中</p>\n<h3 id=\"未加-include-运行ex1\"><a href=\"#未加-include-运行ex1\" class=\"headerlink\" title=\"未加#include&lt;stdio.h&gt;,运行ex1:\"></a>未加#include&lt;stdio.h&gt;,运行ex1:</h3><p><img src=\"/./1-3.png\" alt=\"img\"></p>\n<h3 id=\"添加加-include-运行ex1\"><a href=\"#添加加-include-运行ex1\" class=\"headerlink\" title=\"添加加#include&lt;stdio.h&gt;,运行ex1:\"></a>添加加#include&lt;stdio.h&gt;,运行ex1:</h3><p><img src=\"/./1-4.png\" alt=\"img\"></p>\n<h3 id=\"附加题\"><a href=\"#附加题\" class=\"headerlink\" title=\"附加题\"></a>附加题</h3><h4 id=\"在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\"><a href=\"#在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\" class=\"headerlink\" title=\"在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\"></a>在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。</h4><p>ex1是一个<a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\">ELF文件</a>，随机修改或删除一部分，会导致无法运行</p>\n<h4 id=\"再多打印5行文本或者其它比”Hello-world-”更复杂的东西。\"><a href=\"#再多打印5行文本或者其它比”Hello-world-”更复杂的东西。\" class=\"headerlink\" title=\"再多打印5行文本或者其它比”Hello world.”更复杂的东西。\"></a>再多打印5行文本或者其它比”Hello world.”更复杂的东西。</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;happy new year!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;good good study, day day up!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;路曼曼其修远兮，吾将上下而求索&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;萧瑟秋风今又是，换了人间&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行man-3-puts来阅读这个函数和其它函数的文档\"><a href=\"#执行man-3-puts来阅读这个函数和其它函数的文档\" class=\"headerlink\" title=\"执行man 3 puts来阅读这个函数和其它函数的文档\"></a>执行man 3 puts来阅读这个函数和其它函数的文档</h4><p>这个文档包括了 fputc, fputs, putc, putchar, puts函数，用于输出字符和字符串。</p>\n<p>SYNOPSIS<br>       #include &lt;stdio.h&gt;</p>\n<pre><code>   int fputc(int c, FILE *stream);\n   int putc(int c, FILE *stream);\n   int putchar(int c);\n\n   int fputs(const char *restrict s, FILE *restrict stream);\n   int puts(const char *s);\n</code></pre>\n<p>DESCRIPTION<br>       fputc() writes the character c, cast to an unsigned char, to stream.</p>\n<pre><code>   putc() is equivalent to fputc() except that it may be implemented as a macro which evaluates stream more than once.\n\n   putchar(c) is equivalent to putc(c, stdout).\n\n   fputs() writes the string s to stream, without its terminating null byte (&#39;\\0&#39;).\n\n   puts() writes the string s and a trailing newline to stdout.\n\n   Calls to the functions described here can be mixed with each other and with calls to other output functions from the stdio library for the same output stream.\n\n   For nonlocking counterparts, see unlocked_stdio(3).\n</code></pre>\n<p>RETURN VALUE<br>       fputc(), putc(), and putchar() return the character written as an unsigned char cast to an int or EOF on error.</p>\n<pre><code>   puts() and fputs() return a nonnegative number on success, or EOF on error.\n</code></pre>\n<h2 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex2.html\">练习2</a></h2><p>Makefile文件的缩进是一个TAB，下面代码中第四行rm前面是一个 <em>TAB</em> ，而不是多个等量的空格。<br>其中每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS=-Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">    rm -f ex1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;happy new year!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;good good study, day day up!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;路曼曼其修远兮，吾将上下而求索&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;萧瑟秋风今又是，换了人间&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;仰天大笑出门去，我辈岂是蓬蒿人&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"附加题-1\"><a href=\"#附加题-1\" class=\"headerlink\" title=\"附加题\"></a>附加题</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS=-Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">all: ex2</span><br><span class=\"line\"></span><br><span class=\"line\">%: %.c</span><br><span class=\"line\">        cc $&#123;CFLAGS&#125; -o $@ $^</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY: clean all</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm -rf ex2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>阅读man make来了解关于如何执行它的更多信息。<br>阅读man cc来了解关于-Wall和-g行为的更多信息。<br>在互联网上搜索Makefile文件，看看你是否能改进你的文件。<br>在另一个C语言项目中找到Makefile文件，并且尝试理解它做了什么。</p>\n<h2 id=\"练习3\"><a href=\"#练习3\" class=\"headerlink\" title=\"练习3\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex3.html\">练习3</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> height = <span class=\"number\">72</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am %d years old.\\n&quot;</span>, age);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am %d inches tall.\\n&quot;</span>, height);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS=-Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">all: ex3</span><br><span class=\"line\"></span><br><span class=\"line\">%: %.c</span><br><span class=\"line\">        cc $&#123;CFLAGS&#125; -o $@ $^</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY: clean all</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm -rf ex3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>直接执行 make clean all</p>\n<h2 id=\"练习4\"><a href=\"#练习4\" class=\"headerlink\" title=\"练习4\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex4.html\">练习4</a></h2><p>Valgrind 我之前没有系统学习过，只是零零散散的看到过这个命令。</p>\n","excerpt":"","more":"<blockquote>\n<p>LCTHW： <a href=\"https://learncodethehardway.org/c/\">Learn C The Hard Way</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/\">笨方法学习C(译)</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/wizardforcel/lcthw-zh\">LCTHW Github</a></p>\n</blockquote>\n<h2 id=\"笔记1所包括的范围\"><a href=\"#笔记1所包括的范围\" class=\"headerlink\" title=\"笔记1所包括的范围\"></a>笔记1所包括的范围</h2><ul>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/preface.html\">前言</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/introduction.html\">导言</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex0.html\">练习0</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex1.html\">练习1</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex2.html\">练习2</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex3.html\">练习3</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex4.html\">练习4</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/preface.html\">前言</a></h2><p>期望我能一个月搞定这些教程</p>\n<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/introduction.html\">导言</a></h2><p>所能学到的内容有:</p>\n<ul>\n<li>C的基本语法和编写习惯。</li>\n<li>编译，<code>make</code>文件和链接。</li>\n<li>寻找和预防bug。</li>\n<li>防御性编程实践。</li>\n<li>使C的代码崩溃。</li>\n<li>编写基本的Unix系统软件。</li>\n</ul>\n<p>必须遵守的规则：</p>\n<ul>\n<li>手动输入所有代码。<strong>不要复制粘贴！</strong></li>\n<li>正确地输入所有代码，<strong>也包括注释</strong>。</li>\n<li>运行代码并保证产生相同的输出。</li>\n<li>如果出现了bug则修正它。</li>\n<li>做附加题时，如果你做不出某道题，马上跳过。</li>\n<li>在寻求帮助之前首先试着自己弄懂。</li>\n</ul>\n<p>学习C语言会使你变成更好的程序员，是一门提升程序员核心技能的最佳语言。<br>C比其它语言都要难，而这是由于C并不对你隐藏细节，它们在其它语言中都试图并且未能被掩盖，实质是其他语言对底层细节进行了进一步的封装，程序员仅仅是调用这些上层的函数即可实现功能。</p>\n<h2 id=\"练习0\"><a href=\"#练习0\" class=\"headerlink\" title=\"练习0\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex0.html\">练习0</a></h2><p>我计划使用</p>\n<ul>\n<li>Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 或 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)</li>\n<li>vim</li>\n<li><strong>警告不要使用IDE</strong></li>\n</ul>\n<p>其中，如何配置vim可以参考这个<a href=\"https://ysyx.oscc.cc/docs/ics-pa/0.4.html\">链接</a></p>\n<p>IDE，或者“集成开发工具”，它隐藏了背后的细节，你的工作是弄清楚背后发生了什么，对于学习C编程（以及许多其它语言），它们没有意义。</p>\n<p>IDE类似于吉他的<a href=\"https://en.wikipedia.org/wiki/Tablature\">TAB（tablature）</a>，而我们需要学习的是<a href=\"https://en.wikipedia.org/wiki/Staff_(music)\">五线谱</a></p>\n<h2 id=\"练习1\"><a href=\"#练习1\" class=\"headerlink\" title=\"练习1\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex1.html\">练习1</a></h2><blockquote>\n<p>好好学习，天天向上</p>\n</blockquote>\n<blockquote>\n<p>毛泽东</p>\n</blockquote>\n<h3 id=\"编写如下代码到ex1-c中，如图所示：\"><a href=\"#编写如下代码到ex1-c中，如图所示：\" class=\"headerlink\" title=\"编写如下代码到ex1.c中，如图所示：\"></a>编写如下代码到ex1.c中，如图所示：</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;happy new year!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;good good study, day day up!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/./1-1.png\" alt=\"img\"></p>\n<h3 id=\"执行命令：\"><a href=\"#执行命令：\" class=\"headerlink\" title=\"执行命令：\"></a>执行命令：</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ex1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/./1-2.png\" alt=\"img\"><br>通过编译的结果来看，存在一个警告，提示我们需要将 #include&lt;stdio.h&gt;添加到代码中</p>\n<h3 id=\"未加-include-运行ex1\"><a href=\"#未加-include-运行ex1\" class=\"headerlink\" title=\"未加#include&lt;stdio.h&gt;,运行ex1:\"></a>未加#include&lt;stdio.h&gt;,运行ex1:</h3><p><img src=\"/./1-3.png\" alt=\"img\"></p>\n<h3 id=\"添加加-include-运行ex1\"><a href=\"#添加加-include-运行ex1\" class=\"headerlink\" title=\"添加加#include&lt;stdio.h&gt;,运行ex1:\"></a>添加加#include&lt;stdio.h&gt;,运行ex1:</h3><p><img src=\"/./1-4.png\" alt=\"img\"></p>\n<h3 id=\"附加题\"><a href=\"#附加题\" class=\"headerlink\" title=\"附加题\"></a>附加题</h3><h4 id=\"在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\"><a href=\"#在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\" class=\"headerlink\" title=\"在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。\"></a>在你的文本编辑器中打开ex1文件，随机修改或删除一部分，之后运行它看看发生了什么。</h4><p>ex1是一个<a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\">ELF文件</a>，随机修改或删除一部分，会导致无法运行</p>\n<h4 id=\"再多打印5行文本或者其它比”Hello-world-”更复杂的东西。\"><a href=\"#再多打印5行文本或者其它比”Hello-world-”更复杂的东西。\" class=\"headerlink\" title=\"再多打印5行文本或者其它比”Hello world.”更复杂的东西。\"></a>再多打印5行文本或者其它比”Hello world.”更复杂的东西。</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;happy new year!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;good good study, day day up!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;路曼曼其修远兮，吾将上下而求索&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;萧瑟秋风今又是，换了人间&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行man-3-puts来阅读这个函数和其它函数的文档\"><a href=\"#执行man-3-puts来阅读这个函数和其它函数的文档\" class=\"headerlink\" title=\"执行man 3 puts来阅读这个函数和其它函数的文档\"></a>执行man 3 puts来阅读这个函数和其它函数的文档</h4><p>这个文档包括了 fputc, fputs, putc, putchar, puts函数，用于输出字符和字符串。</p>\n<p>SYNOPSIS<br>       #include &lt;stdio.h&gt;</p>\n<pre><code>   int fputc(int c, FILE *stream);\n   int putc(int c, FILE *stream);\n   int putchar(int c);\n\n   int fputs(const char *restrict s, FILE *restrict stream);\n   int puts(const char *s);\n</code></pre>\n<p>DESCRIPTION<br>       fputc() writes the character c, cast to an unsigned char, to stream.</p>\n<pre><code>   putc() is equivalent to fputc() except that it may be implemented as a macro which evaluates stream more than once.\n\n   putchar(c) is equivalent to putc(c, stdout).\n\n   fputs() writes the string s to stream, without its terminating null byte (&#39;\\0&#39;).\n\n   puts() writes the string s and a trailing newline to stdout.\n\n   Calls to the functions described here can be mixed with each other and with calls to other output functions from the stdio library for the same output stream.\n\n   For nonlocking counterparts, see unlocked_stdio(3).\n</code></pre>\n<p>RETURN VALUE<br>       fputc(), putc(), and putchar() return the character written as an unsigned char cast to an int or EOF on error.</p>\n<pre><code>   puts() and fputs() return a nonnegative number on success, or EOF on error.\n</code></pre>\n<h2 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex2.html\">练习2</a></h2><p>Makefile文件的缩进是一个TAB，下面代码中第四行rm前面是一个 <em>TAB</em> ，而不是多个等量的空格。<br>其中每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS=-Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">    rm -f ex1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;happy new year!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;good good study, day day up!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;路曼曼其修远兮，吾将上下而求索&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;萧瑟秋风今又是，换了人间&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;仰天大笑出门去，我辈岂是蓬蒿人&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"附加题-1\"><a href=\"#附加题-1\" class=\"headerlink\" title=\"附加题\"></a>附加题</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS=-Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">all: ex2</span><br><span class=\"line\"></span><br><span class=\"line\">%: %.c</span><br><span class=\"line\">        cc $&#123;CFLAGS&#125; -o $@ $^</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY: clean all</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm -rf ex2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>阅读man make来了解关于如何执行它的更多信息。<br>阅读man cc来了解关于-Wall和-g行为的更多信息。<br>在互联网上搜索Makefile文件，看看你是否能改进你的文件。<br>在另一个C语言项目中找到Makefile文件，并且尝试理解它做了什么。</p>\n<h2 id=\"练习3\"><a href=\"#练习3\" class=\"headerlink\" title=\"练习3\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex3.html\">练习3</a></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> height = <span class=\"number\">72</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am %d years old.\\n&quot;</span>, age);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am %d inches tall.\\n&quot;</span>, height);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS=-Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">all: ex3</span><br><span class=\"line\"></span><br><span class=\"line\">%: %.c</span><br><span class=\"line\">        cc $&#123;CFLAGS&#125; -o $@ $^</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY: clean all</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm -rf ex3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>直接执行 make clean all</p>\n<h2 id=\"练习4\"><a href=\"#练习4\" class=\"headerlink\" title=\"练习4\"></a><a href=\"https://wizardforcel.gitbooks.io/lcthw/content/ex4.html\">练习4</a></h2><p>Valgrind 我之前没有系统学习过，只是零零散散的看到过这个命令。</p>\n"},{"title":"今天建站了","date":"2024-12-25T01:00:00.000Z","_content":"今天由原来的jekyll变更为了 [Hexo](https://hexo.io/)! 一次非常有意义的尝试，这是第一篇文章，后续将在这里写一些技术、生活等等东西","source":"_posts/hello-world.md","raw":"---\ntitle: 今天建站了\ndate: 2024-12-25 09:00\n---\n今天由原来的jekyll变更为了 [Hexo](https://hexo.io/)! 一次非常有意义的尝试，这是第一篇文章，后续将在这里写一些技术、生活等等东西","slug":"hello-world","published":1,"updated":"2025-01-04T10:59:56.879Z","comments":1,"layout":"post","photos":[],"_id":"cm5i2q4b20003isunah4y57ms","content":"<p>今天由原来的jekyll变更为了 <a href=\"https://hexo.io/\">Hexo</a>! 一次非常有意义的尝试，这是第一篇文章，后续将在这里写一些技术、生活等等东西</p>\n","excerpt":"","more":"<p>今天由原来的jekyll变更为了 <a href=\"https://hexo.io/\">Hexo</a>! 一次非常有意义的尝试，这是第一篇文章，后续将在这里写一些技术、生活等等东西</p>\n"},{"title":"2024年终总结","date":"2025-01-10T06:25:00.000Z","_content":"\n这是一篇写在2025年初的2024年的年终总结，是一篇流水账文章，感觉一切过的好快，又要过年了，在2024年所做的事情有一些甚至都想不起来了，但感觉这一年收获了一些，却还是不够。随着年龄越来越大，日益感觉到了紧迫，也越来越想躺平或者懈怠，遇到了学习上的困难，更想去回避，甚至不想学习或深挖一些内容。\n\n2024年 在leetcode上也刷了一些题，几乎每天都刷，但是没有深入进行，都是围绕着一些基础类型的题，有的时候也会想放弃打退堂鼓。\n\n同时也学习了操作系统和一生一芯，复习了以前学的C语言，以及接触了一些新的工具，需要记忆的东西也变多了，例如：verilator、make/makefile、cmake、gtkwave、systemc，越发觉得知识浩瀚无边，该学的东西太多了。\n\n我只能一个一个工具去学习，去安装有从源码安装也有直接使用apt进行安装，再去看man，去google关于这个工具的document，开始对tutorial，getting started xxx或example进行系统性的学习和分析，然后掌握工具的使用，以及与其他工具进行配合使用等，这可能是最笨的方法了。\n\n有的时候会遇到连某个工具的getting started或tutorial都看不下去，只想速成; 有的时候也会有好几天卡在一个问题上无法进行下去，甚至连工具的example运行都会报出一些莫名其妙的错误; 有的时候也会想放弃，不知道学习这些是为了什么，后续能干啥，会有点小emo，学习的路上也是比较孤单，没有任何交流。\n\n2024年没考什么证，这一点不如2022年和2023年(那两年考了cka/ckad/cks和软考系统工程师)，计划2025年考一个但是没想好考什么，单位的报销目录下面目前没有几个感兴趣并且有用的能考的证书。\n\n使用github/cloudflare进行了hexo博客的搭建，但是还有很多配置没有做，看着有点简单。\n\n2024年夏天那几个周末，去了白洋淀、保定、廊坊、济南游玩了，感觉周末两天也可以去北京周边很多地方，体验感保定是最佳的，有一个驴肉套皮非常好吃。\n\n兴趣上发展了航模RC，购买了一些设备、整机、电源电池等，学习了遥控器opentx/edgetx系统的使用,例如：input/mixed/output混控。\n计划2025年春节回老家试一试，飞一下好好玩。\n\n计划2025年再发展一下音乐，先计划使用库乐队进行启蒙学习，然后再使用具体的乐器进行深入学习，包括钢琴和木吉他/电吉他。\n\n计划2025年把博客进行完善一下，目前还是处于毛坯状态，需要进行软装了。\n\n应该抽一些时间去复习一下2024年发在csdn上的博客文章，偷偷看了一眼感觉大部分文章都忘记了非常陌生了，甚至感觉这不是自己写的博客了。\n\n还有两个星期就放假了，享受这段工作不那么忙的时间，去做一些自己想做的事情。\n","source":"_posts/summary2024.md","raw":"---\ntitle: 2024年终总结\ndate: 2025-01-10 14:25:00\ntags: summary\n---\n\n这是一篇写在2025年初的2024年的年终总结，是一篇流水账文章，感觉一切过的好快，又要过年了，在2024年所做的事情有一些甚至都想不起来了，但感觉这一年收获了一些，却还是不够。随着年龄越来越大，日益感觉到了紧迫，也越来越想躺平或者懈怠，遇到了学习上的困难，更想去回避，甚至不想学习或深挖一些内容。\n\n2024年 在leetcode上也刷了一些题，几乎每天都刷，但是没有深入进行，都是围绕着一些基础类型的题，有的时候也会想放弃打退堂鼓。\n\n同时也学习了操作系统和一生一芯，复习了以前学的C语言，以及接触了一些新的工具，需要记忆的东西也变多了，例如：verilator、make/makefile、cmake、gtkwave、systemc，越发觉得知识浩瀚无边，该学的东西太多了。\n\n我只能一个一个工具去学习，去安装有从源码安装也有直接使用apt进行安装，再去看man，去google关于这个工具的document，开始对tutorial，getting started xxx或example进行系统性的学习和分析，然后掌握工具的使用，以及与其他工具进行配合使用等，这可能是最笨的方法了。\n\n有的时候会遇到连某个工具的getting started或tutorial都看不下去，只想速成; 有的时候也会有好几天卡在一个问题上无法进行下去，甚至连工具的example运行都会报出一些莫名其妙的错误; 有的时候也会想放弃，不知道学习这些是为了什么，后续能干啥，会有点小emo，学习的路上也是比较孤单，没有任何交流。\n\n2024年没考什么证，这一点不如2022年和2023年(那两年考了cka/ckad/cks和软考系统工程师)，计划2025年考一个但是没想好考什么，单位的报销目录下面目前没有几个感兴趣并且有用的能考的证书。\n\n使用github/cloudflare进行了hexo博客的搭建，但是还有很多配置没有做，看着有点简单。\n\n2024年夏天那几个周末，去了白洋淀、保定、廊坊、济南游玩了，感觉周末两天也可以去北京周边很多地方，体验感保定是最佳的，有一个驴肉套皮非常好吃。\n\n兴趣上发展了航模RC，购买了一些设备、整机、电源电池等，学习了遥控器opentx/edgetx系统的使用,例如：input/mixed/output混控。\n计划2025年春节回老家试一试，飞一下好好玩。\n\n计划2025年再发展一下音乐，先计划使用库乐队进行启蒙学习，然后再使用具体的乐器进行深入学习，包括钢琴和木吉他/电吉他。\n\n计划2025年把博客进行完善一下，目前还是处于毛坯状态，需要进行软装了。\n\n应该抽一些时间去复习一下2024年发在csdn上的博客文章，偷偷看了一眼感觉大部分文章都忘记了非常陌生了，甚至感觉这不是自己写的博客了。\n\n还有两个星期就放假了，享受这段工作不那么忙的时间，去做一些自己想做的事情。\n","slug":"summary2024","published":1,"updated":"2025-01-11T02:26:22.144Z","comments":1,"layout":"post","photos":[],"_id":"cm5rkggzo00006sun9c8qfyq8","content":"<p>这是一篇写在2025年初的2024年的年终总结，是一篇流水账文章，感觉一切过的好快，又要过年了，在2024年所做的事情有一些甚至都想不起来了，但感觉这一年收获了一些，却还是不够。随着年龄越来越大，日益感觉到了紧迫，也越来越想躺平或者懈怠，遇到了学习上的困难，更想去回避，甚至不想学习或深挖一些内容。</p>\n<p>2024年 在leetcode上也刷了一些题，几乎每天都刷，但是没有深入进行，都是围绕着一些基础类型的题，有的时候也会想放弃打退堂鼓。</p>\n<p>同时也学习了操作系统和一生一芯，复习了以前学的C语言，以及接触了一些新的工具，需要记忆的东西也变多了，例如：verilator、make&#x2F;makefile、cmake、gtkwave、systemc，越发觉得知识浩瀚无边，该学的东西太多了。</p>\n<p>我只能一个一个工具去学习，去安装有从源码安装也有直接使用apt进行安装，再去看man，去google关于这个工具的document，开始对tutorial，getting started xxx或example进行系统性的学习和分析，然后掌握工具的使用，以及与其他工具进行配合使用等，这可能是最笨的方法了。</p>\n<p>有的时候会遇到连某个工具的getting started或tutorial都看不下去，只想速成; 有的时候也会有好几天卡在一个问题上无法进行下去，甚至连工具的example运行都会报出一些莫名其妙的错误; 有的时候也会想放弃，不知道学习这些是为了什么，后续能干啥，会有点小emo，学习的路上也是比较孤单，没有任何交流。</p>\n<p>2024年没考什么证，这一点不如2022年和2023年(那两年考了cka&#x2F;ckad&#x2F;cks和软考系统工程师)，计划2025年考一个但是没想好考什么，单位的报销目录下面目前没有几个感兴趣并且有用的能考的证书。</p>\n<p>使用github&#x2F;cloudflare进行了hexo博客的搭建，但是还有很多配置没有做，看着有点简单。</p>\n<p>2024年夏天那几个周末，去了白洋淀、保定、廊坊、济南游玩了，感觉周末两天也可以去北京周边很多地方，体验感保定是最佳的，有一个驴肉套皮非常好吃。</p>\n<p>兴趣上发展了航模RC，购买了一些设备、整机、电源电池等，学习了遥控器opentx&#x2F;edgetx系统的使用,例如：input&#x2F;mixed&#x2F;output混控。<br>计划2025年春节回老家试一试，飞一下好好玩。</p>\n<p>计划2025年再发展一下音乐，先计划使用库乐队进行启蒙学习，然后再使用具体的乐器进行深入学习，包括钢琴和木吉他&#x2F;电吉他。</p>\n<p>计划2025年把博客进行完善一下，目前还是处于毛坯状态，需要进行软装了。</p>\n<p>应该抽一些时间去复习一下2024年发在csdn上的博客文章，偷偷看了一眼感觉大部分文章都忘记了非常陌生了，甚至感觉这不是自己写的博客了。</p>\n<p>还有两个星期就放假了，享受这段工作不那么忙的时间，去做一些自己想做的事情。</p>\n","excerpt":"","more":"<p>这是一篇写在2025年初的2024年的年终总结，是一篇流水账文章，感觉一切过的好快，又要过年了，在2024年所做的事情有一些甚至都想不起来了，但感觉这一年收获了一些，却还是不够。随着年龄越来越大，日益感觉到了紧迫，也越来越想躺平或者懈怠，遇到了学习上的困难，更想去回避，甚至不想学习或深挖一些内容。</p>\n<p>2024年 在leetcode上也刷了一些题，几乎每天都刷，但是没有深入进行，都是围绕着一些基础类型的题，有的时候也会想放弃打退堂鼓。</p>\n<p>同时也学习了操作系统和一生一芯，复习了以前学的C语言，以及接触了一些新的工具，需要记忆的东西也变多了，例如：verilator、make&#x2F;makefile、cmake、gtkwave、systemc，越发觉得知识浩瀚无边，该学的东西太多了。</p>\n<p>我只能一个一个工具去学习，去安装有从源码安装也有直接使用apt进行安装，再去看man，去google关于这个工具的document，开始对tutorial，getting started xxx或example进行系统性的学习和分析，然后掌握工具的使用，以及与其他工具进行配合使用等，这可能是最笨的方法了。</p>\n<p>有的时候会遇到连某个工具的getting started或tutorial都看不下去，只想速成; 有的时候也会有好几天卡在一个问题上无法进行下去，甚至连工具的example运行都会报出一些莫名其妙的错误; 有的时候也会想放弃，不知道学习这些是为了什么，后续能干啥，会有点小emo，学习的路上也是比较孤单，没有任何交流。</p>\n<p>2024年没考什么证，这一点不如2022年和2023年(那两年考了cka&#x2F;ckad&#x2F;cks和软考系统工程师)，计划2025年考一个但是没想好考什么，单位的报销目录下面目前没有几个感兴趣并且有用的能考的证书。</p>\n<p>使用github&#x2F;cloudflare进行了hexo博客的搭建，但是还有很多配置没有做，看着有点简单。</p>\n<p>2024年夏天那几个周末，去了白洋淀、保定、廊坊、济南游玩了，感觉周末两天也可以去北京周边很多地方，体验感保定是最佳的，有一个驴肉套皮非常好吃。</p>\n<p>兴趣上发展了航模RC，购买了一些设备、整机、电源电池等，学习了遥控器opentx&#x2F;edgetx系统的使用,例如：input&#x2F;mixed&#x2F;output混控。<br>计划2025年春节回老家试一试，飞一下好好玩。</p>\n<p>计划2025年再发展一下音乐，先计划使用库乐队进行启蒙学习，然后再使用具体的乐器进行深入学习，包括钢琴和木吉他&#x2F;电吉他。</p>\n<p>计划2025年把博客进行完善一下，目前还是处于毛坯状态，需要进行软装了。</p>\n<p>应该抽一些时间去复习一下2024年发在csdn上的博客文章，偷偷看了一眼感觉大部分文章都忘记了非常陌生了，甚至感觉这不是自己写的博客了。</p>\n<p>还有两个星期就放假了，享受这段工作不那么忙的时间，去做一些自己想做的事情。</p>\n"},{"title":"学习verilator-笔记1","date":"2025-01-08T06:39:00.000Z","_content":"\n# 笔记1所包括的范围\n\n+ [verilator](https://verilator.org/guide/latest/)\n+ [ysyx verilator](https://ysyx.oscc.cc/docs/2306/preliminary/0.4.html)\n+ [systemc](https://www.accellera.org/downloads/standards/systemc)\n+ [systemc install](https://github.com/accellera-official/systemc/blob/main/INSTALL.md)\n+ [gtkwave](https://gtkwave.github.io/gtkwave/index.html)\n+ [gtkwave formats](https://gtkwave.github.io/gtkwave/intro/formats.html)\n+ [cmake](https://cmake.org/)\n+ [cmake download](https://cmake.org/download/)\n\n# verilator安装\n我的电脑是Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 和 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)\n安装方法有两种：\n第一种是直接使用apt进行安装\napt-get install verilator\n第二种是通过编译的方式(我采用这种方法)\n根据ysyx的手册，我们安装v5.008版本\n\n```c\n前提条件，需要预先安装一些包用于编译：\n#sudo apt-get install git help2man perl python3 make autoconf g++ flex bison ccache\n#sudo apt-get install libgoogle-perftools-dev numactl perl-doc\n#sudo apt-get install libfl2  # Ubuntu only (ignore if gives error)\n#sudo apt-get install libfl-dev  # Ubuntu only (ignore if gives error)\n#sudo apt-get install zlibc zlib1g zlib1g-dev  # Ubuntu only (ignore if gives error)\n\ngit clone https://github.com/verilator/verilator   # Only first time\n\n# Every time you need to build:\nunsetenv VERILATOR_ROOT  # For csh; ignore error if on bash\nunset VERILATOR_ROOT  # For bash\ncd verilator\ngit pull         # Make sure git repository is up-to-date\ngit tag          # See what versions exist\n# 这里的版本与 文档保持一致，v5.008\ngit checkout v{version}  # Switch to specified release version\n\nautoconf         # Create ./configure script\n./configure      # Configure and create Makefile\nmake -j `nproc`  # Build Verilator itself (if error, try just 'make')\nsudo make install\n```\n# systemc安装\n[官方安装步骤](https://github.com/accellera-official/systemc/blob/main/INSTALL.md)\n\n我自己的安装步骤：\n  1. 下载[systemc](https://www.accellera.org/downloads/standards/systemc)并解压\n\t\t ```bash\n\t\t tar -xzvf systemc-3.0.1.tar.gz\n  2. 进入systemc目录并创建临时目录objdir\n     ```bash\n\t\t cd systemc-3.0.1\n     mkdir objdir\n     cd objdir\n     ```\n  3. 配置\n     ```bash\n     ../configure\n\t\t or\n     ../configure 'CXXFLAGS=-std=c++17'\n\t\t or\n\t\t ../configure --prefix=/usr/local/systemc-3.0.0\n     ```\n  4. 编译\n     ```bash\n     make\n     ```\n  5. 编译和运行子文件夹中的案例\n     ```bash\n     make check\n     ```\n  6. 安装\n     ```bash\n     make install\n     ```\n\t7. 添加环境变量\n     ```bash\n\t\t echo \"# SystemC Install path\" >> ~/.bashrc\n     echo \"export SYSTEMC_HOME=$HOME/Program/systemc-3.0.1\" >> ~/.bashrc\n     echo \"export SYSTEMC_INCLUDE=$SYSTEMC_HOME/include\" >> ~/.bashrc\n     echo \"export SYSTEMC_LIBDIR=$SYSTEMC_HOME/lib-linuxaarch64\" >> ~/.bashrc\n     ```\n# verilator使用\n\nverilator不是一个传统的仿真器而是一个编译器，用于将verilog和systemverilog等硬件描述语言转换为C++或SystemC模型，编译后可执行。\nverilator给的案例中，有一个是[Example C++ Execution](https://verilator.org/guide/latest/example_cc.html),\n```c\nmkdir test_our\ncd test_our\ncat >our.v <<'EOF'\n  module our;\n     initial begin \n\t\t\t$display(\"Hello World\"); \n\t\t\t$finish; \n\t\t end\n  endmodule\nEOF\n\ncat >sim_main.cpp <<'EOF'\n  #include \"Vour.h\"\n  #include \"verilated.h\"\n  int main(int argc, char** argv) {\n      VerilatedContext* contextp = new VerilatedContext;\n      contextp->commandArgs(argc, argv);\n      Vour* top = new Vour{contextp};\n      while (!contextp->gotFinish()) { top->eval(); }\n      delete top;\n      delete contextp;\n      return 0;\n  }\nEOF\n```\n编译并运行\n```bash\nverilator --cc --exe --build -j 0 -Wall sim_main.cpp our.v\nobj_dir/Vour\n```\n\n# gtkwave安装\n\nGTKWave是一个基于Unix/Win32/MacOSX的全特性的示波器，类似于学习物理或通信所用的物理示波器，可以支持FST、LXT、LXT2、VZT、GHW和标准verilog VCD/EVCD等格式，主要用于挑食Verilog和VHDL仿真模型，它是通过分析采集后的dumpfiles文件进行分析，而不是实时交互式的那种示波器，支持模拟数据或数字数据，支持各种搜索操作，可从信号波形中提取感兴趣的，也可以通过PostScript和FrameMaker格式生成输出。\n\n这个组件的安装就很随意了，直接使用apt进行安装\n```bash\nsudo apt install gtkwave\n```\n# gtkwave使用\n\n我们直接按照它提供的[案例](https://gtkwave.github.io/gtkwave/quickstart/sample.html)进行说明。\n将[example代码](https://github.com/gtkwave/gtkwave)下载到本地\n这个例子是des加密即des.v, 我的当前系统并没有安装iverilog软件，咱们这里仅是将现有的des.fst转换为vcd\n```bash\n$ fst2vcd des.fst > des.vcd\n```\n我们会发现这个以.vcd为结尾的文件比.fst文件大很多，推荐使用.fst文件，后面会说如何将.vcd文件自动转化为.fst文件。\n下一步，我们通过verilator生成一个stems文件\n```c\nverilator -Wno-fatal --no-timing des.v -xml-only\nxml2stems obj_dir/Vdes.xml des.stems\n```\n当源文件布局或体系变更需要重新生成stems文件。\n```bash\n//  -o, --optimize             optimize VCD to FST 对vcd文件进行自动优化为fst\n//  -t, --stems=FILE           specify stems file for source code annotation 为源代码注解指定stems文件\n$ gtkwave -o -t des.stems des.vcd des.gtkw\nGTKWave Analyzer v3.3.118 (w)1999-2023 BSI\nFSTLOAD | Processing 1432 facs.\nFSTLOAD | Built 1287 signals and 145 aliases.\nFSTLOAD | Building facility hierarchy tree.\nFSTLOAD | Sorting facility hierarchy tree.\n```\n\n# cmake安装\n从[下载链接](https://cmake.org/download/)进行下载最新版本的cmake源码，当前版本是3.31.3\n```bash\ntar -xzvf cmake-3.31.3.tar.gz\ncd cmake-3.31.3\n./configure\nmake -j8\nsudo make install\n```\n并输出cmake版本\n```bash\ncmake --version\n```\n\n","source":"_posts/verilator1.md","raw":"---\ntitle: 学习verilator-笔记1\ndate: 2025-01-08 14:39:00\ntags: verilator\n---\n\n# 笔记1所包括的范围\n\n+ [verilator](https://verilator.org/guide/latest/)\n+ [ysyx verilator](https://ysyx.oscc.cc/docs/2306/preliminary/0.4.html)\n+ [systemc](https://www.accellera.org/downloads/standards/systemc)\n+ [systemc install](https://github.com/accellera-official/systemc/blob/main/INSTALL.md)\n+ [gtkwave](https://gtkwave.github.io/gtkwave/index.html)\n+ [gtkwave formats](https://gtkwave.github.io/gtkwave/intro/formats.html)\n+ [cmake](https://cmake.org/)\n+ [cmake download](https://cmake.org/download/)\n\n# verilator安装\n我的电脑是Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 和 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)\n安装方法有两种：\n第一种是直接使用apt进行安装\napt-get install verilator\n第二种是通过编译的方式(我采用这种方法)\n根据ysyx的手册，我们安装v5.008版本\n\n```c\n前提条件，需要预先安装一些包用于编译：\n#sudo apt-get install git help2man perl python3 make autoconf g++ flex bison ccache\n#sudo apt-get install libgoogle-perftools-dev numactl perl-doc\n#sudo apt-get install libfl2  # Ubuntu only (ignore if gives error)\n#sudo apt-get install libfl-dev  # Ubuntu only (ignore if gives error)\n#sudo apt-get install zlibc zlib1g zlib1g-dev  # Ubuntu only (ignore if gives error)\n\ngit clone https://github.com/verilator/verilator   # Only first time\n\n# Every time you need to build:\nunsetenv VERILATOR_ROOT  # For csh; ignore error if on bash\nunset VERILATOR_ROOT  # For bash\ncd verilator\ngit pull         # Make sure git repository is up-to-date\ngit tag          # See what versions exist\n# 这里的版本与 文档保持一致，v5.008\ngit checkout v{version}  # Switch to specified release version\n\nautoconf         # Create ./configure script\n./configure      # Configure and create Makefile\nmake -j `nproc`  # Build Verilator itself (if error, try just 'make')\nsudo make install\n```\n# systemc安装\n[官方安装步骤](https://github.com/accellera-official/systemc/blob/main/INSTALL.md)\n\n我自己的安装步骤：\n  1. 下载[systemc](https://www.accellera.org/downloads/standards/systemc)并解压\n\t\t ```bash\n\t\t tar -xzvf systemc-3.0.1.tar.gz\n  2. 进入systemc目录并创建临时目录objdir\n     ```bash\n\t\t cd systemc-3.0.1\n     mkdir objdir\n     cd objdir\n     ```\n  3. 配置\n     ```bash\n     ../configure\n\t\t or\n     ../configure 'CXXFLAGS=-std=c++17'\n\t\t or\n\t\t ../configure --prefix=/usr/local/systemc-3.0.0\n     ```\n  4. 编译\n     ```bash\n     make\n     ```\n  5. 编译和运行子文件夹中的案例\n     ```bash\n     make check\n     ```\n  6. 安装\n     ```bash\n     make install\n     ```\n\t7. 添加环境变量\n     ```bash\n\t\t echo \"# SystemC Install path\" >> ~/.bashrc\n     echo \"export SYSTEMC_HOME=$HOME/Program/systemc-3.0.1\" >> ~/.bashrc\n     echo \"export SYSTEMC_INCLUDE=$SYSTEMC_HOME/include\" >> ~/.bashrc\n     echo \"export SYSTEMC_LIBDIR=$SYSTEMC_HOME/lib-linuxaarch64\" >> ~/.bashrc\n     ```\n# verilator使用\n\nverilator不是一个传统的仿真器而是一个编译器，用于将verilog和systemverilog等硬件描述语言转换为C++或SystemC模型，编译后可执行。\nverilator给的案例中，有一个是[Example C++ Execution](https://verilator.org/guide/latest/example_cc.html),\n```c\nmkdir test_our\ncd test_our\ncat >our.v <<'EOF'\n  module our;\n     initial begin \n\t\t\t$display(\"Hello World\"); \n\t\t\t$finish; \n\t\t end\n  endmodule\nEOF\n\ncat >sim_main.cpp <<'EOF'\n  #include \"Vour.h\"\n  #include \"verilated.h\"\n  int main(int argc, char** argv) {\n      VerilatedContext* contextp = new VerilatedContext;\n      contextp->commandArgs(argc, argv);\n      Vour* top = new Vour{contextp};\n      while (!contextp->gotFinish()) { top->eval(); }\n      delete top;\n      delete contextp;\n      return 0;\n  }\nEOF\n```\n编译并运行\n```bash\nverilator --cc --exe --build -j 0 -Wall sim_main.cpp our.v\nobj_dir/Vour\n```\n\n# gtkwave安装\n\nGTKWave是一个基于Unix/Win32/MacOSX的全特性的示波器，类似于学习物理或通信所用的物理示波器，可以支持FST、LXT、LXT2、VZT、GHW和标准verilog VCD/EVCD等格式，主要用于挑食Verilog和VHDL仿真模型，它是通过分析采集后的dumpfiles文件进行分析，而不是实时交互式的那种示波器，支持模拟数据或数字数据，支持各种搜索操作，可从信号波形中提取感兴趣的，也可以通过PostScript和FrameMaker格式生成输出。\n\n这个组件的安装就很随意了，直接使用apt进行安装\n```bash\nsudo apt install gtkwave\n```\n# gtkwave使用\n\n我们直接按照它提供的[案例](https://gtkwave.github.io/gtkwave/quickstart/sample.html)进行说明。\n将[example代码](https://github.com/gtkwave/gtkwave)下载到本地\n这个例子是des加密即des.v, 我的当前系统并没有安装iverilog软件，咱们这里仅是将现有的des.fst转换为vcd\n```bash\n$ fst2vcd des.fst > des.vcd\n```\n我们会发现这个以.vcd为结尾的文件比.fst文件大很多，推荐使用.fst文件，后面会说如何将.vcd文件自动转化为.fst文件。\n下一步，我们通过verilator生成一个stems文件\n```c\nverilator -Wno-fatal --no-timing des.v -xml-only\nxml2stems obj_dir/Vdes.xml des.stems\n```\n当源文件布局或体系变更需要重新生成stems文件。\n```bash\n//  -o, --optimize             optimize VCD to FST 对vcd文件进行自动优化为fst\n//  -t, --stems=FILE           specify stems file for source code annotation 为源代码注解指定stems文件\n$ gtkwave -o -t des.stems des.vcd des.gtkw\nGTKWave Analyzer v3.3.118 (w)1999-2023 BSI\nFSTLOAD | Processing 1432 facs.\nFSTLOAD | Built 1287 signals and 145 aliases.\nFSTLOAD | Building facility hierarchy tree.\nFSTLOAD | Sorting facility hierarchy tree.\n```\n\n# cmake安装\n从[下载链接](https://cmake.org/download/)进行下载最新版本的cmake源码，当前版本是3.31.3\n```bash\ntar -xzvf cmake-3.31.3.tar.gz\ncd cmake-3.31.3\n./configure\nmake -j8\nsudo make install\n```\n并输出cmake版本\n```bash\ncmake --version\n```\n\n","slug":"verilator1","published":1,"updated":"2025-01-11T02:26:22.211Z","comments":1,"layout":"post","photos":[],"_id":"cm5rkggzv00016suna71wc5on","content":"<h1 id=\"笔记1所包括的范围\"><a href=\"#笔记1所包括的范围\" class=\"headerlink\" title=\"笔记1所包括的范围\"></a>笔记1所包括的范围</h1><ul>\n<li><a href=\"https://verilator.org/guide/latest/\">verilator</a></li>\n<li><a href=\"https://ysyx.oscc.cc/docs/2306/preliminary/0.4.html\">ysyx verilator</a></li>\n<li><a href=\"https://www.accellera.org/downloads/standards/systemc\">systemc</a></li>\n<li><a href=\"https://github.com/accellera-official/systemc/blob/main/INSTALL.md\">systemc install</a></li>\n<li><a href=\"https://gtkwave.github.io/gtkwave/index.html\">gtkwave</a></li>\n<li><a href=\"https://gtkwave.github.io/gtkwave/intro/formats.html\">gtkwave formats</a></li>\n<li><a href=\"https://cmake.org/\">cmake</a></li>\n<li><a href=\"https://cmake.org/download/\">cmake download</a></li>\n</ul>\n<h1 id=\"verilator安装\"><a href=\"#verilator安装\" class=\"headerlink\" title=\"verilator安装\"></a>verilator安装</h1><p>我的电脑是Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 和 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)<br>安装方法有两种：<br>第一种是直接使用apt进行安装<br>apt-get install verilator<br>第二种是通过编译的方式(我采用这种方法)<br>根据ysyx的手册，我们安装v5.008版本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前提条件，需要预先安装一些包用于编译：</span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install git help2man perl python3 make autoconf g++ flex bison ccache</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install libgoogle-perftools-dev numactl perl-doc</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install libfl2  # Ubuntu only (ignore <span class=\"keyword\">if</span> gives <span class=\"keyword\">error</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install libfl-dev  # Ubuntu only (ignore <span class=\"keyword\">if</span> gives <span class=\"keyword\">error</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install zlibc zlib1g zlib1g-dev  # Ubuntu only (ignore <span class=\"keyword\">if</span> gives <span class=\"keyword\">error</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/verilator/verilator   # Only first time</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Every time you need to build:</span><br><span class=\"line\">unsetenv VERILATOR_ROOT  # For csh; ignore error <span class=\"keyword\">if</span> on bash</span><br><span class=\"line\">unset VERILATOR_ROOT  # For bash</span><br><span class=\"line\">cd verilator</span><br><span class=\"line\">git pull         # Make sure git repository is up-to-date</span><br><span class=\"line\">git tag          # See what versions exist</span><br><span class=\"line\"># 这里的版本与 文档保持一致，v5.<span class=\"number\">008</span></span><br><span class=\"line\">git checkout v&#123;version&#125;  # Switch to specified release version</span><br><span class=\"line\"></span><br><span class=\"line\">autoconf         # Create ./configure script</span><br><span class=\"line\">./configure      # Configure and create Makefile</span><br><span class=\"line\">make -j `nproc`  # Build Verilator <span class=\"title function_\">itself</span> <span class=\"params\">(<span class=\"keyword\">if</span> error, try just <span class=\"string\">&#x27;make&#x27;</span>)</span></span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"systemc安装\"><a href=\"#systemc安装\" class=\"headerlink\" title=\"systemc安装\"></a>systemc安装</h1><p><a href=\"https://github.com/accellera-official/systemc/blob/main/INSTALL.md\">官方安装步骤</a></p>\n<p>我自己的安装步骤：</p>\n<ol>\n<li>下载<a href=\"https://www.accellera.org/downloads/standards/systemc\">systemc</a>并解压<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> tar -xzvf systemc-3.0.1.tar.gz</span><br><span class=\"line\">2. 进入systemc目录并创建临时目录objdir</span><br><span class=\"line\">   ```bash</span><br><span class=\"line\"> <span class=\"built_in\">cd</span> systemc-3.0.1</span><br><span class=\"line\">   <span class=\"built_in\">mkdir</span> objdir</span><br><span class=\"line\">   <span class=\"built_in\">cd</span> objdir</span><br></pre></td></tr></table></figure></li>\n<li>配置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ../configure</span><br><span class=\"line\">or</span><br><span class=\"line\">  ../configure <span class=\"string\">&#x27;CXXFLAGS=-std=c++17&#x27;</span></span><br><span class=\"line\">or</span><br><span class=\"line\">../configure --prefix=/usr/local/systemc-3.0.0</span><br></pre></td></tr></table></figure></li>\n<li>编译<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure></li>\n<li>编译和运行子文件夹中的案例<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make check</span><br></pre></td></tr></table></figure></li>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<pre><code>7. 添加环境变量\n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;# SystemC Install path&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;export SYSTEMC_HOME=<span class=\"variable\">$HOME</span>/Program/systemc-3.0.1&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;export SYSTEMC_INCLUDE=<span class=\"variable\">$SYSTEMC_HOME</span>/include&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;export SYSTEMC_LIBDIR=<span class=\"variable\">$SYSTEMC_HOME</span>/lib-linuxaarch64&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"verilator使用\"><a href=\"#verilator使用\" class=\"headerlink\" title=\"verilator使用\"></a>verilator使用</h1><p>verilator不是一个传统的仿真器而是一个编译器，用于将verilog和systemverilog等硬件描述语言转换为C++或SystemC模型，编译后可执行。<br>verilator给的案例中，有一个是<a href=\"https://verilator.org/guide/latest/example_cc.html\">Example C++ Execution</a>,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir test_our</span><br><span class=\"line\">cd test_our</span><br><span class=\"line\">cat &gt;our.v &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">  module our;</span><br><span class=\"line\">     initial begin </span><br><span class=\"line\">\t\t\t$display(<span class=\"string\">&quot;Hello World&quot;</span>); </span><br><span class=\"line\">\t\t\t$finish; </span><br><span class=\"line\">\t\t end</span><br><span class=\"line\">  endmodule</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt;sim_main.cpp &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Vour.h&quot;</span></span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;verilated.h&quot;</span></span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> &#123;</span><br><span class=\"line\">      VerilatedContext* contextp = new VerilatedContext;</span><br><span class=\"line\">      contextp-&gt;commandArgs(argc, argv);</span><br><span class=\"line\">      Vour* top = new Vour&#123;contextp&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!contextp-&gt;gotFinish()) &#123; top-&gt;eval(); &#125;</span><br><span class=\"line\">      delete top;</span><br><span class=\"line\">      delete contextp;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>编译并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verilator --cc --exe --build -j 0 -Wall sim_main.cpp our.v</span><br><span class=\"line\">obj_dir/Vour</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"gtkwave安装\"><a href=\"#gtkwave安装\" class=\"headerlink\" title=\"gtkwave安装\"></a>gtkwave安装</h1><p>GTKWave是一个基于Unix&#x2F;Win32&#x2F;MacOSX的全特性的示波器，类似于学习物理或通信所用的物理示波器，可以支持FST、LXT、LXT2、VZT、GHW和标准verilog VCD&#x2F;EVCD等格式，主要用于挑食Verilog和VHDL仿真模型，它是通过分析采集后的dumpfiles文件进行分析，而不是实时交互式的那种示波器，支持模拟数据或数字数据，支持各种搜索操作，可从信号波形中提取感兴趣的，也可以通过PostScript和FrameMaker格式生成输出。</p>\n<p>这个组件的安装就很随意了，直接使用apt进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install gtkwave</span><br></pre></td></tr></table></figure>\n<h1 id=\"gtkwave使用\"><a href=\"#gtkwave使用\" class=\"headerlink\" title=\"gtkwave使用\"></a>gtkwave使用</h1><p>我们直接按照它提供的<a href=\"https://gtkwave.github.io/gtkwave/quickstart/sample.html\">案例</a>进行说明。<br>将<a href=\"https://github.com/gtkwave/gtkwave\">example代码</a>下载到本地<br>这个例子是des加密即des.v, 我的当前系统并没有安装iverilog软件，咱们这里仅是将现有的des.fst转换为vcd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fst2vcd des.fst &gt; des.vcd</span><br></pre></td></tr></table></figure>\n<p>我们会发现这个以.vcd为结尾的文件比.fst文件大很多，推荐使用.fst文件，后面会说如何将.vcd文件自动转化为.fst文件。<br>下一步，我们通过verilator生成一个stems文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verilator -Wno-fatal --no-timing des.v -xml-only</span><br><span class=\"line\">xml2stems obj_dir/Vdes.xml des.stems</span><br></pre></td></tr></table></figure>\n<p>当源文件布局或体系变更需要重新生成stems文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  -o, --optimize             optimize VCD to FST 对vcd文件进行自动优化为fst</span><br><span class=\"line\">//  -t, --stems=FILE           specify stems file <span class=\"keyword\">for</span> <span class=\"built_in\">source</span> code annotation 为源代码注解指定stems文件</span><br><span class=\"line\">$ gtkwave -o -t des.stems des.vcd des.gtkw</span><br><span class=\"line\">GTKWave Analyzer v3.3.118 (w)1999-2023 BSI</span><br><span class=\"line\">FSTLOAD | Processing 1432 facs.</span><br><span class=\"line\">FSTLOAD | Built 1287 signals and 145 aliases.</span><br><span class=\"line\">FSTLOAD | Building facility hierarchy tree.</span><br><span class=\"line\">FSTLOAD | Sorting facility hierarchy tree.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"cmake安装\"><a href=\"#cmake安装\" class=\"headerlink\" title=\"cmake安装\"></a>cmake安装</h1><p>从<a href=\"https://cmake.org/download/\">下载链接</a>进行下载最新版本的cmake源码，当前版本是3.31.3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cmake-3.31.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> cmake-3.31.3</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make -j8</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make install</span><br></pre></td></tr></table></figure>\n<p>并输出cmake版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"笔记1所包括的范围\"><a href=\"#笔记1所包括的范围\" class=\"headerlink\" title=\"笔记1所包括的范围\"></a>笔记1所包括的范围</h1><ul>\n<li><a href=\"https://verilator.org/guide/latest/\">verilator</a></li>\n<li><a href=\"https://ysyx.oscc.cc/docs/2306/preliminary/0.4.html\">ysyx verilator</a></li>\n<li><a href=\"https://www.accellera.org/downloads/standards/systemc\">systemc</a></li>\n<li><a href=\"https://github.com/accellera-official/systemc/blob/main/INSTALL.md\">systemc install</a></li>\n<li><a href=\"https://gtkwave.github.io/gtkwave/index.html\">gtkwave</a></li>\n<li><a href=\"https://gtkwave.github.io/gtkwave/intro/formats.html\">gtkwave formats</a></li>\n<li><a href=\"https://cmake.org/\">cmake</a></li>\n<li><a href=\"https://cmake.org/download/\">cmake download</a></li>\n</ul>\n<h1 id=\"verilator安装\"><a href=\"#verilator安装\" class=\"headerlink\" title=\"verilator安装\"></a>verilator安装</h1><p>我的电脑是Linux Ubuntu 24.04.1 LTS (vmware虚拟机x86) 和 Linux UnionTech OS Desktop 20 Pro(真实机器aarch64)<br>安装方法有两种：<br>第一种是直接使用apt进行安装<br>apt-get install verilator<br>第二种是通过编译的方式(我采用这种方法)<br>根据ysyx的手册，我们安装v5.008版本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前提条件，需要预先安装一些包用于编译：</span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install git help2man perl python3 make autoconf g++ flex bison ccache</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install libgoogle-perftools-dev numactl perl-doc</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install libfl2  # Ubuntu only (ignore <span class=\"keyword\">if</span> gives <span class=\"keyword\">error</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install libfl-dev  # Ubuntu only (ignore <span class=\"keyword\">if</span> gives <span class=\"keyword\">error</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#sudo apt-get install zlibc zlib1g zlib1g-dev  # Ubuntu only (ignore <span class=\"keyword\">if</span> gives <span class=\"keyword\">error</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/verilator/verilator   # Only first time</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Every time you need to build:</span><br><span class=\"line\">unsetenv VERILATOR_ROOT  # For csh; ignore error <span class=\"keyword\">if</span> on bash</span><br><span class=\"line\">unset VERILATOR_ROOT  # For bash</span><br><span class=\"line\">cd verilator</span><br><span class=\"line\">git pull         # Make sure git repository is up-to-date</span><br><span class=\"line\">git tag          # See what versions exist</span><br><span class=\"line\"># 这里的版本与 文档保持一致，v5.<span class=\"number\">008</span></span><br><span class=\"line\">git checkout v&#123;version&#125;  # Switch to specified release version</span><br><span class=\"line\"></span><br><span class=\"line\">autoconf         # Create ./configure script</span><br><span class=\"line\">./configure      # Configure and create Makefile</span><br><span class=\"line\">make -j `nproc`  # Build Verilator <span class=\"title function_\">itself</span> <span class=\"params\">(<span class=\"keyword\">if</span> error, try just <span class=\"string\">&#x27;make&#x27;</span>)</span></span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"systemc安装\"><a href=\"#systemc安装\" class=\"headerlink\" title=\"systemc安装\"></a>systemc安装</h1><p><a href=\"https://github.com/accellera-official/systemc/blob/main/INSTALL.md\">官方安装步骤</a></p>\n<p>我自己的安装步骤：</p>\n<ol>\n<li>下载<a href=\"https://www.accellera.org/downloads/standards/systemc\">systemc</a>并解压<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> tar -xzvf systemc-3.0.1.tar.gz</span><br><span class=\"line\">2. 进入systemc目录并创建临时目录objdir</span><br><span class=\"line\">   ```bash</span><br><span class=\"line\"> <span class=\"built_in\">cd</span> systemc-3.0.1</span><br><span class=\"line\">   <span class=\"built_in\">mkdir</span> objdir</span><br><span class=\"line\">   <span class=\"built_in\">cd</span> objdir</span><br></pre></td></tr></table></figure></li>\n<li>配置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ../configure</span><br><span class=\"line\">or</span><br><span class=\"line\">  ../configure <span class=\"string\">&#x27;CXXFLAGS=-std=c++17&#x27;</span></span><br><span class=\"line\">or</span><br><span class=\"line\">../configure --prefix=/usr/local/systemc-3.0.0</span><br></pre></td></tr></table></figure></li>\n<li>编译<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure></li>\n<li>编译和运行子文件夹中的案例<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make check</span><br></pre></td></tr></table></figure></li>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<pre><code>7. 添加环境变量\n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;# SystemC Install path&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;export SYSTEMC_HOME=<span class=\"variable\">$HOME</span>/Program/systemc-3.0.1&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;export SYSTEMC_INCLUDE=<span class=\"variable\">$SYSTEMC_HOME</span>/include&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;export SYSTEMC_LIBDIR=<span class=\"variable\">$SYSTEMC_HOME</span>/lib-linuxaarch64&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"verilator使用\"><a href=\"#verilator使用\" class=\"headerlink\" title=\"verilator使用\"></a>verilator使用</h1><p>verilator不是一个传统的仿真器而是一个编译器，用于将verilog和systemverilog等硬件描述语言转换为C++或SystemC模型，编译后可执行。<br>verilator给的案例中，有一个是<a href=\"https://verilator.org/guide/latest/example_cc.html\">Example C++ Execution</a>,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir test_our</span><br><span class=\"line\">cd test_our</span><br><span class=\"line\">cat &gt;our.v &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">  module our;</span><br><span class=\"line\">     initial begin </span><br><span class=\"line\">\t\t\t$display(<span class=\"string\">&quot;Hello World&quot;</span>); </span><br><span class=\"line\">\t\t\t$finish; </span><br><span class=\"line\">\t\t end</span><br><span class=\"line\">  endmodule</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt;sim_main.cpp &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Vour.h&quot;</span></span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;verilated.h&quot;</span></span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> &#123;</span><br><span class=\"line\">      VerilatedContext* contextp = new VerilatedContext;</span><br><span class=\"line\">      contextp-&gt;commandArgs(argc, argv);</span><br><span class=\"line\">      Vour* top = new Vour&#123;contextp&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!contextp-&gt;gotFinish()) &#123; top-&gt;eval(); &#125;</span><br><span class=\"line\">      delete top;</span><br><span class=\"line\">      delete contextp;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>编译并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verilator --cc --exe --build -j 0 -Wall sim_main.cpp our.v</span><br><span class=\"line\">obj_dir/Vour</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"gtkwave安装\"><a href=\"#gtkwave安装\" class=\"headerlink\" title=\"gtkwave安装\"></a>gtkwave安装</h1><p>GTKWave是一个基于Unix&#x2F;Win32&#x2F;MacOSX的全特性的示波器，类似于学习物理或通信所用的物理示波器，可以支持FST、LXT、LXT2、VZT、GHW和标准verilog VCD&#x2F;EVCD等格式，主要用于挑食Verilog和VHDL仿真模型，它是通过分析采集后的dumpfiles文件进行分析，而不是实时交互式的那种示波器，支持模拟数据或数字数据，支持各种搜索操作，可从信号波形中提取感兴趣的，也可以通过PostScript和FrameMaker格式生成输出。</p>\n<p>这个组件的安装就很随意了，直接使用apt进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install gtkwave</span><br></pre></td></tr></table></figure>\n<h1 id=\"gtkwave使用\"><a href=\"#gtkwave使用\" class=\"headerlink\" title=\"gtkwave使用\"></a>gtkwave使用</h1><p>我们直接按照它提供的<a href=\"https://gtkwave.github.io/gtkwave/quickstart/sample.html\">案例</a>进行说明。<br>将<a href=\"https://github.com/gtkwave/gtkwave\">example代码</a>下载到本地<br>这个例子是des加密即des.v, 我的当前系统并没有安装iverilog软件，咱们这里仅是将现有的des.fst转换为vcd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fst2vcd des.fst &gt; des.vcd</span><br></pre></td></tr></table></figure>\n<p>我们会发现这个以.vcd为结尾的文件比.fst文件大很多，推荐使用.fst文件，后面会说如何将.vcd文件自动转化为.fst文件。<br>下一步，我们通过verilator生成一个stems文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verilator -Wno-fatal --no-timing des.v -xml-only</span><br><span class=\"line\">xml2stems obj_dir/Vdes.xml des.stems</span><br></pre></td></tr></table></figure>\n<p>当源文件布局或体系变更需要重新生成stems文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  -o, --optimize             optimize VCD to FST 对vcd文件进行自动优化为fst</span><br><span class=\"line\">//  -t, --stems=FILE           specify stems file <span class=\"keyword\">for</span> <span class=\"built_in\">source</span> code annotation 为源代码注解指定stems文件</span><br><span class=\"line\">$ gtkwave -o -t des.stems des.vcd des.gtkw</span><br><span class=\"line\">GTKWave Analyzer v3.3.118 (w)1999-2023 BSI</span><br><span class=\"line\">FSTLOAD | Processing 1432 facs.</span><br><span class=\"line\">FSTLOAD | Built 1287 signals and 145 aliases.</span><br><span class=\"line\">FSTLOAD | Building facility hierarchy tree.</span><br><span class=\"line\">FSTLOAD | Sorting facility hierarchy tree.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"cmake安装\"><a href=\"#cmake安装\" class=\"headerlink\" title=\"cmake安装\"></a>cmake安装</h1><p>从<a href=\"https://cmake.org/download/\">下载链接</a>进行下载最新版本的cmake源码，当前版本是3.31.3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cmake-3.31.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> cmake-3.31.3</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make -j8</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make install</span><br></pre></td></tr></table></figure>\n<p>并输出cmake版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm5i2q4ao0000isunbv2o1q9n","tag_id":"cm5i2q4av0001isunc6ap37p0","_id":"cm5i2q4aw0002isun0avq03qu"},{"post_id":"cm5rkggzo00006sun9c8qfyq8","tag_id":"cm5rkggzx00026sund439bdm3","_id":"cm5rkgh0400046sun6q8u2aza"},{"post_id":"cm5rkggzv00016suna71wc5on","tag_id":"cm5rkgh0100036sunah5hdd1s","_id":"cm5rkgh0400056sundomkaivy"}],"Tag":[{"name":"LCTHW","_id":"cm5i2q4av0001isunc6ap37p0"},{"name":"summary","_id":"cm5rkggzx00026sund439bdm3"},{"name":"verilator","_id":"cm5rkgh0100036sunah5hdd1s"}]}}